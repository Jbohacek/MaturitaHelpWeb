@{
    Layout = "_Layout"; // Nechat jak je

    ViewBag.Title = "Rekurze";
    ViewBag.Author = "Jakub Boháček";

    //Ani jedna z nich není nutná, nějaký stánky nemají Editora, tak to prostě nenapiště:

}


@* Nadpisy *@
<div class="display-1">
    Rekurze
</div>

<div class="background-text">
    Rekurze je <span>programovací</span> technika, při níž je určitá <a asp-controller="Question" asp-action="ProceduryFunkce">procedura nebo funkce</a> znovu volána dříve, než je dokončeno její předchozí volání.
    <br /><br/>
    Použití rekurze může u některých úloh vést ke stručnému
    a matematicky elegantnímu řešení. Nevede ale nutně k řešení optimálnímu. 
    Použití rekurze vede obvykle k jinému rozložení využití prostředků přidělených programu 
    operačním systémem, případně k jejich rychlejšímu vyčerpání, 
    proto se při optimalizaci programu většinou snažíme rekurzi omezit nebo odstranit.
    <br/><br />
    Některé (zejména starší) programovací jazyky a některé překladače rekurzi neumožňují; 
    jiné vyžadují, aby programátor explicitně uvedl, že je daná procedura nebo funkce rekurzivní.
    <br/><br />
    Řadu rekurzívních algoritmů lze nahradit iteračními, které počítají výsledek „zdola nahoru“, tj, od menších (jednodušších) dat k větším (složitějším)<br/> 
    <span>Vše co jde napsat rekurzivně, jde i iterativně !</span>
    <br/><br/>
    Výhodou rekurzivních funkcí (procedur) je jednoduchost a přehlednost <br/>
    Nevýhodou může být časová náročnost způsobená např. zbytečným opakováním výpočtu

    <div class="sha text-center my-3">Více informací: <a href="https://cs.wikipedia.org/wiki/Rekurze_(programov%C3%A1n%C3%AD)">Wikipedia</a></div>
</div>
<div class="display-3 mb-1">
    Terminologie
</div>
<div class="background-text">
    Volání může probíhat přímo nebo nepřímo:
    <ul>
        <li><span>Přímá rekurze</span> nastává, když podprogram volá přímo sám sebe.</li>
        <li><span>Nepřímá rekurze</span> je situace, kdy vzájemné volání podprogramů vytvoří „kruh“. Např. ve funkci A se volá funkce B a ve funkci B se volá opět funkce A.</li>
    </ul>
    <br/><br />
    Podprogram může být volán jednou nebo vícekrát:
    <ul>
        <li><span>Lineární rekurze</span> nastává, pokud podprogram při vykonávání svého úkolu volá sama sebe pouze jednou. Vytváří se takto lineární struktura postupně volaných podprogramů.</li>
        <li><span>Stromová rekurze</span> nastává, pokud se funkce nebo procedura v rámci jednoho vykonání svého úkolu vyvolá vícekrát.
            Strukturu volání je možné znázornit jako <a href="https://cs.wikipedia.org/wiki/Strom_(graf)#zako%C5%99en%C4%9Bn%C3%BD_strom">zakořeněný 
                strom</a> . Pro dvě volání v jednom průchodu vzniká <a href="https://cs.wikipedia.org/wiki/Bin%C3%A1rn%C3%AD_strom">binární strom</a> , 
            pro tři ternární strom, atd. (Počet rekurzivních volání nemusí být konstantní, např. při rekurzivním procházení grafu voláme zpracování na 
            všechny sousedy vrcholu, a těch je obecně různý počet.)</li>
    </ul>
    <div class="row">
        <div class="col">
            <img class="img-fluid w-100" src="~/Pictures/Rekurze/Binarní strom.png"/>
            <div class="text-center">Binární strom</div>
        </div>
        <div class="col">
            <img class="img-fluid w-100" src="~/Pictures/Rekurze/Strom.png" />
            <div class="text-center">Zakořeněný strom <span class="sha">(stromový graf)</span> </div>
        </div>
    </div>
</div>
<div class="display-3 mb-1">
    Základní kroky
</div>
<div class="background-text">
    Program, který používá rekurzivní volání, obvykle provádí tyto kroky:
    <ul>
        <li><span>Kontrola</span></li>
        <li><span>Inicializace</span></li>
        <li><span>Vlastní rekurze</span>
            <ul>
                <li>Rozdělení problému na dílčí podproblémy.</li>
                <li>Zavolání funkcí, které řeší daný podproblém (tady nastává přímé nebo nepřímé volání sebe sama).</li>
                <li>Sestavení výsledku.</li>
            </ul>
        </li>
        <li><span>Vrácení výsledku.</span></li>
    </ul>

</div>

<div class="display-3 mb-1">
    Algoritmy
</div>
<div class="background-text">
    V oblasti algoritmů můžeme pomocí rekurze nalézt řešení obecných úloh rozkladem
    na dílčí úlohy stejného typu. Často jej nalezneme v algoritmech typu „<a asp-controller="Algorithms" asp-action="MergeSort">rozděl a panuj</a>“.
    Tato programovací technika se hodí pro takové úlohy, u nichž je rozdělení na menší úlohy 
    stejného charakteru snadné a přirozené. Typickým příkladem přirozeně rekurzivního algoritmu 
    je průchod stromem (s obecným počtem potomků):
</div>
<div class="display-3 mb-1">
    Příklady v <span>C#</span>
</div>
<div class="background-text">
    <pre>
    <code class="language-csharp">
        int fakt_rek(int number) 
        {
            if (number < 0)
            {
                return 0;
            }

            if (number == 0 || number == 1)
            {
                return 1;
            }

            return number * fakt_rek(number - 1);
        }
    </code>
</pre>
    <div class="sha text-center">Zdroj: <a href="https://www.algoritmy.net/article/118/Faktorial">algoritmy.net</a></div>
</div>

@await Html.PartialAsync("_Sources",
        new SourcesModel(
                "https://cs.wikipedia.org/wiki/Rekurze_(programov%C3%A1n%C3%AD)"
        ))
@{
    Layout = "_Layout"; // Nechat jak je

    ViewBag.Title = "Form datagrid";
    ViewBag.Author = "Jakub Boháček";

}

<div class="display-1">
    Form datagrid
</div>
<div class="background-text">
    Neni potřeba databaze, je poteřeba jen suchy datagrid.

    Sám o sobě má metody na přidávání uživatelem a pod, nedoporučuju (pridat obrazek)


    1 prasácký ládování 

    this.datagridView.Collums.Add("Name", "Jmeno")
    this.datagridView.Collums.Add("Surname", "prijmeni")

    this.datagridview.rows.add("Jakub","Bohajdo")


    lze přidávat cokoliv přes UI, ale není to ochráněné, tudiž nebezpečné


    <span>Prace s datasources</span>

    List string data = new();

    this.datagridView.datasource = this.data

    Automaticky vytvoří soupečky

    Data se nerefresuje automaticky, musí odpíchnout a zase připnout


    Je poteřeba na automatickou obnovu používat binding list

    Eventy
    addingNew
    ListChanged


    <span>Zobrazovani</span>

    atribute [browsable(false)] zakazuje výpis

    atribute [DisplayName("Jmeno")] Změní název toho sloupečku

    UI datapropertyName nám dáva možnost to udělat přes UI a změnit tak název

    Sloupce, který nejsou na bindovany tak se tak vždy vypíšou

    Musime v kodu
    Před připojení datagridu mužeme nastavit vlastnost autogenerateCollums = false;

    <span>Vybirani prvku</span>

    Funguje vždy
    this.datagriView.CurrentRow.Index

    Funguje jen přes datasource
    This.dataGridView.DataBoundItem 



    <span>Implemetace vlastního</span>

    Pokud přidáme interface IListSource
    Má v sobě ten bindingList

    Public IList GetList()
    {
        return data
    }

    (fotka v mobilu)


    <span>Vystvetleni repository</span>

</div>
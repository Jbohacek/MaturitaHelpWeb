@{
    Layout = "_Layout"; // Nechat jak je

    ViewBag.Title = "Pokročilé OOP";
    ViewBag.Author = "Jakub Boháček";

}

<div class="display-1">
    Pokročilé OOP
</div>


<div class="display-2">
    Static elementy
</div>

<div class="background-text">
    Statický jsou vždy přístupny i když instance není nijak declarovaná. <br />
    Jedná se <span>všudepřístupné hodnoty</span> , avšak s timto musíme velmi opratrně pracovat.

    <pre>
    <code class="language-csharp">

// Dá se zavolat 

Foo.Xxx();
Foo.Value = 5;

public class Foo
{
    public static int Value;

    public static void Xxx()
    {

    }

    public void Test
    {

    }


}
    </code>
</pre>
    
    <div class="display-4">
        Statický konstruktor
    </div>
    Statický konstruktor se spouští v momentě, když vyvoláme <span>jakoukoliv</span> statickou
    <ul>
        <li>Metodu</li>
        <li>Parametr</li>
        <li>novou instanci (new neco())</li>
    </ul>
    <span>zavolá se jen jednou</span> a nesmí mít žádné parametry
    <pre>
    <code class="language-csharp">

// Dá se zavolat 
// všechno zavolá statický konstrukor, ale pouze jednou.

Foo.Xxx(); // zde se zavolá konstruktor
Foo.Value = 5;

public class Foo
{
    public static int Value;

    static Foo()
    {

    }

    public static void Xxx()
    {

    }
}
    </code>
</pre>

</div>


<div class="display-2">
    Vnitřní třída
</div>

    <div class="background-text">
    Lze definovat třídu ve třídě, avšak lze použít <span>vně třídy a mimo třídy</span> , za předpokladu, že je vnitřní třída <span>public</span>. <br />

    Umožnuje použití struktury, kterou nechceme ventilovat ven.
    <pre>
    <code class="language-csharp">

LinkedList list = new LinkedList();
LinkedList.Item item = new LinkedList.Item();

public class LinkedList
{
    private Item first;

    // Lze vidět
    public class Item
    {

    }

    // Neni vidět
    private class SecureItem
    {

    }
}
    </code>
</pre>
    </div>


<div class="display-2">
    Generika
</div>
<div class="background-text">

    Pokud vytváříme například list, tak jsme momentalní chvíly limitovaný pouze na to co zadáme jako typ, momentální chvíly <span>int</span>.<br />
    Kdybychom chtěli string, tak musime opět vytvořit to stejný, ale s jiným

    <pre>
    <code class="language-csharp">
public class MyListInt
{
    private int[] data;

    private int count;

    public void Add(int value)
    {
        this.data[this.count++] = value;
    }
}

public class MyListString
{
    private string[] data;

    private int count;

    public void Add(string value)
    {
        this.data[this.count++] = value;
    }
}
    </code>
</pre>

    <div class="display-4">
        Použití generiky
    </div>

    Mužeme použit něco co se jmenuje generický a umožnuje nám určit o jaký typ se bude jednat

    <pre>
    <code class="language-csharp">
public class MyListInt@("<T>")
{
    private T[] data;

    private int count;

    public void Add(T value)
    {
        this.data[this.count++] = value;
    }
}
    // mužeme mít i více 
public class MyList@("<TKey, TValue>") 

    // I na více mužeme definovat jejich typy
public class MyList@("<TKey, TValue>") where TKey : class, IDisposable
                                       where TValue : new()

    // hodnotovy typ
public class MyList@("<T>") where T : struct 

    // bez parametrický konstrukor
public class MyList@("<T>") where T : new 

    // referenční typ
public class MyList@("<T>") where T : class 
{
    private T[] data;

    private int count;

    public void Add(T value)
    {
        this.data[this.count++] = value;
    }
}

// mužeme dělat i metodu, nemusíme se omezovat na classy
public static void GetNazevAnicka@("<T>") (List@("<T>") Value1, T Value2) 
{

}

    </code>
</pre>
</div>

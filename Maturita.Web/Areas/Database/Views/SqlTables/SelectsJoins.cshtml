@{
    Layout = "_Layout"; // Nechat jak je

    ViewBag.Title = "Dotazy - Selects Joins";
    ViewBag.Author = "";

    ViewBag.GenerateContent = true;
}
<div class="display-1">
    @ViewBag.Title
</div>
<article>
    <p>Joiny v <strong>MS SQL</strong> slouží k kombinování řádků z dvou nebo více tabulek na základě určité podmínky (obvykle podmínky shody v konkrétních sloupcích). V závislosti na typu joinu můžete dosáhnout různých výsledků.</p>
    <img src="~/Pictures/_Database/Tables/Visual_SQL_JOINS_orig.jpg" class="img-fluid d-block mx-auto w-100">

    <p>Zde jsou různé typy joinů v <strong>MS SQL</strong> a jak fungují:</p>

    <ul>
        <li>
            <strong>INNER JOIN:</strong> Vrací pouze řádky, které mají odpovídající hodnoty v obou tabulkách na základě podmínky joinu. Pokud tedy nejsou žádné odpovídající řádky, výsledkem bude prázdná sada.
            <pre><code class="language-sql">SELECT columns
FROM table1
INNER JOIN table2 ON table1.common_column = table2.common_column;
</code></pre>
        </li>
        <li>
            <strong>LEFT JOIN (také LEFT OUTER JOIN):</strong> Vrací všechny řádky z levé tabulky a odpovídající řádky z pravé tabulky. Pokud neexistuje shoda v pravé tabulce, výsledkem bude NULL.
            <pre><code class="language-sql">SELECT columns
FROM table1
LEFT JOIN table2 ON table1.common_column = table2.common_column;
</code></pre>
        </li>
        <li>
            <strong>RIGHT JOIN (také RIGHT OUTER JOIN):</strong> Opačný k LEFT JOIN, vrací všechny řádky z pravé tabulky a odpovídající řádky z levé tabulky. Pokud neexistuje shoda v levé tabulce, výsledkem bude NULL.
            <pre><code class="language-sql">SELECT columns
FROM table1
RIGHT JOIN table2 ON table1.common_column = table2.common_column;
</code></pre>
        </li>
        <li>
            <strong>FULL JOIN (také FULL OUTER JOIN):</strong> Kombinuje výsledky LEFT JOIN a RIGHT JOIN. Vrací všechny řádky z obou tabulek, a pokud nejsou žádné odpovídající řádky, výsledek bude NULL.
            <pre><code class="language-sql">SELECT columns
FROM table1
FULL JOIN table2 ON table1.common_column = table2.common_column;
</code></pre>
        </li>
        <li>
            <strong>CROSS JOIN:</strong> Vrací kartézský součin tabulek, což znamená, že každý řádek z první tabulky se spojí s každým řádkem z druhé tabulky. Nebo také vrací všechny kombinace řádků z obou tabulek.
            <pre><code class="language-sql">SELECT columns
FROM table1
CROSS JOIN table2;
</code></pre>
        </li>
        <li>
            <strong>SELF JOIN:</strong> Je vlastně join na stejné tabulce, může být užitečný pro porovnání hodnot v různých řádcích téže tabulky.
            <pre><code class="language-sql">SELECT a.columns, b.columns
FROM table a
JOIN table b ON a.common_column = b.common_column;
</code></pre>
        </li>
    </ul>

    <p>Joiny mohou zahrnovat podmínky pro přesné srovnání nebo mohou být založeny na více sloupcích. To vám umožňuje flexibilitu v získávání dat z různých tabulek na základě vašich požadavků.</p>

</article>

<div class="display-2">
    Příklady:
</div>
<article>
    <pre>
<code class="language-sql">
/*DEMO JOINů*/

/*vytvoření dočasných tabuleky ##tbKlienti (id,Klient) a ##tbPlatby (id, idKlient, platba) - i s ošetřením*/

if exists(select * from tempdb.sys.tables where name = '##tbKlienti')
drop table ##tbKlienti

if exists(select * from tempdb.sys.tables where name = '##tbPlatby')
drop table ##tbPlatby

create table ##tbKlienti
(
id int identity(1,1),
klient varchar(50)
)

create table ##tbPlatby
(
id int identity(1,1),
idKlient int,
platba money
)

/*vložení 5 záznamů do klientů - Novák, Zoufalý, Suchá, Kokos, Zchudlá*/
/*vložení 12 záznamů do plateb - 3 platby Novák, 4 platby Suchá, tři platby Kokos, 2 platby anonym*/
insert into ##tbKlienti values ('Novák')
insert into ##tbKlienti values ('Zoufalý')
insert into ##tbKlienti values ('Suchá')
insert into ##tbKlienti values ('Kokos')
insert into ##tbKlienti values ('Zchudlá')

insert into ##tbPlatby values (1,20000)
insert into ##tbPlatby values (1,20000)
insert into ##tbPlatby values (1,20000)

insert into ##tbPlatby values (3,50000)
insert into ##tbPlatby values (3,50000)
insert into ##tbPlatby values (3,50000)
insert into ##tbPlatby values (3,50000)

insert into ##tbPlatby values (4,70000)
insert into ##tbPlatby values (4,70000)
insert into ##tbPlatby values (4,70000)

insert into ##tbPlatby values (9,90000000000)
insert into ##tbPlatby values (9,90000000000)


select * from ##tbKlienti
select * from ##tbPlatby

/*cross join*/
select k.klient, p.platba from ##tbKlienti k cross join ##tbPlatby p
select k.klient, p.platba from ##tbKlienti k, ##tbPlatby p

/*inner join*/
select k.klient, p.platba from ##tbKlienti k inner join ##tbPlatby p
on k.id = p.idKlient

/*left join*/
select k.klient, p.platba from ##tbKlienti k left join ##tbPlatby p
on k.id = p.idKlient

/*right join*/
select k.klient, p.platba from ##tbKlienti k right join ##tbPlatby p
on k.id = p.idKlient

/*full join*/
select k.klient, p.platba from ##tbKlienti k full join ##tbPlatby p
on k.id = p.idKlient
</code>
</pre>
 
</article>

<div class="display-2">Videa</div>
<article>
    @await Html.PartialAsync("_YoutubeVideoPlayer", "https://www.youtube.com/embed/Yh4CrPHVBdE?si=7fRAPhT92vK79B0x")
    @await Html.PartialAsync("_YoutubeVideoPlayer", "https://www.youtube.com/embed/G3lJAxg1cy8?si=1YTvk5OZHx99zGTL")
</article>